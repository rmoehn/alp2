"""
    This module offers a set of very simple paint functions to generate
    PostScript files. It is not a very robust solution.
    It was just made to visualize some simple recursion functions for the
    third homework of the ALP2-Class
    Author: M. Esponda
"""
"""
   The variable psFile is a File-Object to store the PostScript-Programm.
   This is not a really good programming style, but we put this variable hier
   to minimize the number of arguments to be pass between functions.
   You need to be carefull because only one File can be use at the same time,
   when you are working with this functions
"""
psFile = None

def begin( filename, width, height ):
    """ Write the PostScript header. You allways need to use this function, when you begin to create of a PostScript file """
    global psFile
    psFile = open( filename, 'w', 1)
    if ( psFile != None ):
        psFile.write("%%!PS-Adobe-3.0 EPSF-3.0\n")
        psFile.write("%%%%BoundingBox: 0 0 %d %d \n" % (width, height))
    else:
        psFile.write("The function begin can't open the file %s\n"% filename )

def end():
    """ Finish a PostScript file """
    psFile.write( "showpage\n" )
    psFile.close()

def drawLine( x1, y1, x2, y2 ):
    """ Draw a line from (x1, y1) to (x2, y2) """
    psFile.write("newpath\n")
    psFile.write("%f %f moveto\n"% (x1, y1))
    psFile.write("%f %f lineto\n"% (x2, y2))
    psFile.write("stroke\n")

def drawSquare( x, y, size ):
    """ Draw a square with a left upper corner in (x,y) and the input size """
    psFile.write("newpath\n")
    psFile.write("%f %f moveto\n"% (x, y))
    psFile.write("%f %f lineto\n"% (x, y+size))
    psFile.write("%f %f lineto\n"% (x+size, y+size))
    psFile.write("%f %f lineto\n"% (x+size, y))
    psFile.write("%f %f lineto\n"% (x, y))
    psFile.write("closepath\n")
    psFile.write("stroke\n")

def fillSquare( x, y, size ):
    """ Paint a square and fill it with the current color """
    psFile.write("newpath\n")
    psFile.write("%f %f moveto\n"% (x, y))
    psFile.write("%f %f lineto\n"% (x, y+size))
    psFile.write("%f %f lineto\n"% (x+size, y+size))
    psFile.write("%f %f lineto\n"% (x+size, y))
    psFile.write("%f %f lineto\n"% (x, y))
    psFile.write("closepath\n")
    psFile.write("fill\n")
    psFile.write( "stroke\n")

def drawRect( x, y, width, height ):
    """ Draw a rectangle """
    psFile.write("newpath\n")
    psFile.write("%f %f moveto\n"% (x, y))
    psFile.write("%f %f lineto\n"% (x, y+height))
    psFile.write("%f %f lineto\n"% (x+width, y+height))
    psFile.write("%f %f lineto\n"% (x+widht, y))
    psFile.write("%f %f lineto\n"% (x, y))
    psFile.write("closepath\n")
    psFile.write("stroke\n")

def fillRect( x, y, width, height ):
    """ Paint a rectangle and fill it with the current color """
    psFile.write("newpath\n")
    psFile.write("%f %f moveto\n"% (x, y))
    psFile.write("%f %f lineto\n"% (x, y+height))
    psFile.write("%f %f lineto\n"% (x+width, y+height))
    psFile.write("%f %f lineto\n"% (x+widht, y))
    psFile.write("%f %f lineto\n"% (x, y))
    psFile.write("closepath\n")
    psFile.write("fill\n")
    psFile.write("stroke\n")

def drawPolygon( x, y, size ):
    """ Draw a polygon. The arguments x and y are two lists with size elements"""

    psFile.write("newpath\n")
    psFile.write("%f %f moveto\n"% (x[0], y[0]))

    for i in range(size):
        psFile.write("%f %f lineto\n"% (x[i], y[i]))

    psFile.write("closepath\n")
    psFile.write("stroke\n")

def fillPolygon( x, y, size ):
    """ Paint a polygon. The arguments x and y are two lists with size elements"""

    psFile.write("newpath\n")
    psFile.write("%f %f moveto\n"% (x[0], y[0]))

    for i in range(size):
        psFile.write("%f %f lineto\n"% (x[i], y[i]))

    psFile.write("closepath\n")
    psFile.write("fill\n")
    psFile.write("stroke\n")

def arc( x, y, r, agrad, fgrad ):
    """ This function draws an arc to the current path.
        The arc is generated by sweeping a line segment of length r,
        tied on the (x,y) coordinates from an angle agrad to an angle fgrad.
    """
    psFile.write("newpath\n")
    psFile.write("%f %f %f %f %f arc\n" % (x, y, r, agrad, fgrad))
    psFile.write("stroke\n")

def drawCircle( x, y, diam ):
    """ Drau a circle with center (x,y) """
    arc( x, y, diam // 2, 0, 360 )

def fillCircle( x, y, diam ):
    """ Paint a circle with center (x,y) and fill it with the current pen color """
    psFile.write("newpath\n")
    psFile.write("%f %f %f 0 360 arc\n" % (x, y, diam // 2))
    psFile.write("fill\n")
    psFile.write("stroke\n")

def setColor( r, g, b ):
    """ change the current pen color """
    psFile.write("%f %f %f setrgbcolor\n" % (r, g, b))

def setLineWidth( width ):
    """ change the line width """
    psFile.write("%f setlinewidth\n"% (width) )

def setLineJoin( n ):
    """ change the form of the line join between two lines """
    psFile.write("%d setlinejoin\n"% (n) );


""" Functions for simple transformations """

def scale( sx, sy ):
     psFile.write("%f %f scale\n"% (sx, sy))

def translate ( tx, ty ):
     psFile.write("%f %f translate\n"% (tx, ty))


""" This is a set of very primitive PostScript functions """

def newpath():
    psFile.write("newpath\n")

def closepath():
    """ close a path drawing a line from the last to the first position """
    psFile.write("closepath\n")

def stroke():
    """ finish a stroke """
    psFile.write("stroke\n")

def moveto( x, y ):
    """ change the current position to a new (x,y) position"""
    psFile.write("%f %f moveto\n"% (y, x ))

def lineto( x, y ):
    """ draw a line without finishing the stroke"""
    psFile.write("%f %f lineto\n"% (y, x))

def rmoveto( dx, dy ):
    """ move the current position relative to the last (x, y) position of the current path
        after the execution is the new current position (x+dx, y+dy) """
    psFile.write("%f %f rmoveto\n"% (x, y))


def rlineto( dx, dy ):
    """ add a line relative to the last (x, y) position of the current path
        with end position (x+dx, y+dy)"""
    psFile.write("%f %f rlineto\n"% (dx, dy))

